{"version":3,"sources":["PathFindingVisualizer/Node/Node.jsx","Algorithm/pathfindingAlgorithms.js","PathFindingVisualizer/PathFindingVisualizer.jsx","SortingVisualizer/Pile/Pile.jsx","Algorithm/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","AIVisualizer/Perceptron/Perceptron.js","AIVisualizer/Perceptron/PtronVisualizer.jsx","AIVisualizer/PongVisualizer/PongAgent.js","AIVisualizer/PongVisualizer/PongVisualizer.jsx","AIVisualizer/ConnectFourVisualizer/MinimaxAgent.js","AIVisualizer/ConnectFourVisualizer/ConnectFour.jsx","AIVisualizer/NNSnakeVisualizer/SnakeNode/SnakeNode.jsx","AIVisualizer/NNSnakeVisualizer/NNSnakeVisualizer.jsx","AIVisualizer/AIVisualizer.jsx","Visualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","row","col","isFinish","isStart","onMouseDown","onMouseEnter","onMouseUp","isWall","extraClassName","id","className","Component","dijkstra","grid","start","finish","visitedInOrder","distance","unvisited","allNodes","length","sort","a","b","closest","shift","Infinity","isVisited","push","updateUnvisitedNeighbors","DFS","node","pop","concat","getUNeighbors","BFS","neighbors","reN","index","neighbor","previousNode","AStar","heuristic","cur","updateUnvisitedNeighborsStar","manhattanDistance","ar","ac","br","bc","Math","abs","re","randomSelect","path","min","max","floor","random","getNeighbors","visited","points","height","width","pRe","validate","slice","connected","unconnected","forEach","nr","nc","ir","ic","c","u","connect","makeWall","isW","newNode","PathFindingVisualizer","state","FR","FC","mouseIsPressed","changingStart","changingFinish","visualized","rendering","numRow","numCol","SR","SC","speed","delays","currentAlgorithm","algorithms","pathfindingAlgorithms","visualizePathfinding","bind","clearVisualizer","setAlgorithm","getFunctions","algoId","setState","initializeGrid","clearWall","currentRow","element","document","getElementById","createNode","updateGridWithWall","clearVisitedAndPath","newFinish","newStart","setVisualizerRendering","g","shortedPath","unshift","getShortestPath","i","setTimeout","n","console","log","map","rowId","key","nodeId","handleMouseDown","handleMouseEnter","handleMouseUp","class","style","marginTop","type","disabled","data-toggle","aria-haspopup","aria-expanded","marginRight","aria-labelledby","onClick","setSpeed","j","splice","rn","primMaze","marginLeft","Pile","val","isChanging","finished","isPivot","size","colorSetIndex","changingColors","offSet","normalColors","color","lineOff","indicatorLength","background","position","display","x1","y1","x2","y2","stroke","strokeWidth","swap","piles","tempVal","selectionSort","statesInOrder","minId","temp","changing","bubbleSort","newN","insertionSort","mergeSort","mergeSortHelper","end","mid","k","pilesC","merge","quickSort","quickSortHelper","pivot","partition","SortingVisualizer","numPiles","maxPile","changingPiles","pileDelayTimes","DelayTimesSizeBased","getRandomInt","descriptions","unsortedPiles","sortingAlgorithms","randomizePiles","visualizeSorting","initializePiles","s","sizes","nSquare","nLogn","pile","pileId","dummy","indexOf","setSize","range","Perceptron","alpha","weights","Array","inputs","desired","error","feedforward","sum","activate","PtronVisualizer","training","count","ptron","xOff","yOff","M","B","resetVisualizer","startVisualizer","x","as","ae","bs","be","y","answer","f","input","output","initialize","getWeights","xx1","yy1","xx2","yy2","train","guess","fill","textComponet","aM","aB","eM","eB","text","fontFamily","fontSize","circles","point","pointId","radius","opacity","all","name","ref","layer","ax","ay","bx","by","sqrt","PongAgent","discount","epsilon","featureList","action","dots","minDis","d","px","vx","vy","terminal","getMove","features","minDisToDot","result","getFeatures","feature","nextState","reward","diff","getValue","getQ","p","curActions","actions","getPolicy","reAction","maxQ","PongVisualizer","r","ballSpeed","panelx","panely","panelSpeed","ballInitialized","framecount","score","pressedLeft","pressedRight","gameCount","agent","notStarted","componentDidMount","ox","randomInt","ovx","ovy","storedWeights","movePanel","goMouseEnter","onMouseLeave","w1","w2","w3","getState","getAction","curScore","curGameCount","updateBall","updateDots","updatePanel","update","isNaN","dot","dotId","MinimaxAgent","depth","humanPlayer","aiPiece","humanPiece","board","getActions","maxVal","maxValAction","boardCopy","minimax","tryMove","colId","newCol","reverse","four","tar","count1","countN","count2","pow","scoreFour","isMax","beta","checkWinner","getScore","Piece","Col","handleClick","handleEnter","handleLeave","pieces","ConnectFour","currentPlayer","aiPlayer","lastBoards","colors","winner","minimaxAgent","reset","player","move","AITakeMove","buttons","setStartingPlayer","undo","setDepth","cols","loadingImg","src","zIndex","alt","textAlign","checkFour","SnakeNode","NNSnakeVisualizer","numRows","numCols","snake","direction","dr","dc","foodPos","foodScore","randomRow","randomCol","nextFood","line","showSnake","food","updateSnake","lastNode","checkFoodEaten","randomFood","num","AIVisualizer","visualizeAI","getAIFunctions","newScript","run","url","script","createElement","body","appendChild","renderObj","Visualizer","mode","goFunction","resetFunction","sortingClicked","pathClicked","AIClicked","aicount","changeRenderingState","go","setAlgo","interval","springConfig","stiffness","adjustingSpeed","href","data-target","invisibleOrNot","algorithm","role","data-dismiss","App","charset","content","rel","integrity","crossorigin","basename","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d93a8b60.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n    render() {\n        const {\n            row,\n            col,\n            isFinish,\n            isStart,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n            isWall,\n        } = this.props;\n        const extraClassName = isFinish\n            ? 'node-finish'\n            : isStart\n                ? 'node-start'\n                : isWall\n                    ? 'node-wall'\n                    : '';\n        return (\n            <div\n                id={`node-${row}-${col}`}\n                className={`node ${extraClassName}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}>\n            </div>\n        );\n    }\n}","\nfunction dijkstra(grid, start, finish) {\n    const visitedInOrder = [];\n    start.distance = 0;\n    const unvisited = allNodes(grid);\n    while (unvisited.length) {\n        sortNodes(unvisited);\n        const closest = unvisited.shift();\n        if (closest === finish) {\n            return visitedInOrder;\n        }\n        if (closest.isWall) continue;\n        if (closest.distance === Infinity) return visitedInOrder;\n        closest.isVisited = true;\n        visitedInOrder.push(closest);\n\n        updateUnvisitedNeighbors(closest, grid);\n    }\n    return visitedInOrder;\n}\n\nfunction DFS(grid, start, finish) {\n    const visitedInOrder = [];\n    let unvisited = [];\n    unvisited.push(start);\n    while (unvisited.length) {\n        const node = unvisited.pop();\n        if (node === finish) {\n            return visitedInOrder;\n        }\n        if (node.isWall) continue;\n        node.isVisited = true;\n        visitedInOrder.push(node);\n\n        unvisited = unvisited.concat(getUNeighbors(node, grid));\n    }\n\n    return visitedInOrder;\n}\n\nfunction BFS(grid, start, finish) {\n    const visitedInOrder = [];\n    let unvisited = [];\n    unvisited.push(start);\n    while (unvisited.length) {\n        const node = unvisited.shift();\n        if (node === finish) {\n            return visitedInOrder;\n        }\n        if (node.isWall) continue;\n        node.isVisited = true;\n        visitedInOrder.push(node);\n\n        unvisited = unvisited.concat(getUNeighbors(node, grid));\n    }\n\n    return visitedInOrder;\n}\n\nfunction getUNeighbors(node, grid) {\n    const neighbors = [];\n    const reN = [];\n    const { row, col } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n\n    for (let index = 0; index < neighbors.length; index++) {\n        const neighbor = neighbors[index];\n        if (!neighbor.isVisited) {\n            neighbor.previousNode = node;\n            neighbor.isVisited = true;\n            reN.push(neighbor);\n        }\n    }\n    return reN;\n\n}\n\nfunction AStar(grid, start, finish) {\n    const visitedInOrder = [];\n    start.distance = 0;\n    start.heuristic = 0;\n    const unvisited = allNodes(grid);\n    while (unvisited.length) {\n        sortNodesStar(unvisited);\n        const cur = unvisited.shift();\n        if (cur === finish) {\n            return visitedInOrder;\n        }\n        if (cur.isWall) continue;\n        if (cur.distance + cur.heuristic === Infinity) return visitedInOrder;\n        cur.isVisited = true;\n        visitedInOrder.push(cur);\n\n        updateUnvisitedNeighborsStar(cur, grid, finish);\n    }\n    return visitedInOrder;\n}\n\nfunction updateUnvisitedNeighborsStar(cur, grid, finish) {\n    const neighbors = [];\n    const { row, col } = cur;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    for (const neighbor of neighbors) {\n        if (!neighbor.isVisited) {\n            neighbor.distance = cur.distance + 1;\n            neighbor.heuristic = manhattanDistance(neighbor, finish);\n            neighbor.previousNode = cur;\n        }\n    }\n}\n\nfunction manhattanDistance(a, b) {\n    let { row: ar, col: ac } = a;\n    let { row: br, col: bc } = b;\n    return Math.abs(ar - br) + Math.abs(ac - bc);\n}\n\nfunction allNodes(grid) {\n    const re = [];\n    for (const row of grid) {\n        for (const node of row) {\n            re.push(node);\n        }\n    }\n    return re;\n}\n\nfunction sortNodesStar(nodes) {\n    nodes.sort((a, b) => (a.distance + a.heuristic) - (b.distance + b.heuristic));\n}\n\n\nfunction sortNodes(nodes) {\n    nodes.sort((a, b) => a.distance - b.distance);\n}\n\nfunction updateUnvisitedNeighbors(closest, grid) {\n    const neighbors = [];\n    const { row, col } = closest;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    for (const neighbor of neighbors) {\n        if (!neighbor.isVisited) {\n            neighbor.distance = closest.distance + 1;\n            neighbor.previousNode = closest;\n        }\n    }\n}\n\nfunction getShortestPath(finish) {\n    const path = [];\n    let cur = finish;\n    while (cur !== null) {\n        path.unshift(cur);\n        cur = cur.previousNode;\n    }\n    return path;\n}\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction primMaze(grid) {\n    let sr = 7, sc = 17; // set a starting point for generating maze\n    let height = grid.length, width = grid[0].length;\n    for (let i = 0; i < height; i++) {\n        for (let j = 0; j < width; j++) {\n            makeWall(grid, i, j, false);\n        }\n\n    }\n    for (let i = 0; i < height; i++) {\n        for (let j = i % 2 + 1; j < width; j += i % 2 + 1) {\n            makeWall(grid, i, j, true);\n        }\n    }\n    for (let i = 0; i < height; i++) {\n        makeWall(grid, i, 0, true);\n    }\n    let visited = [];\n    let path = [{ row: sr, col: sc }];\n    while (path.length > 0) {\n        const index = randomSelect(path);\n        const node = path[index];\n        path.splice(index, 1);\n        visited = visited.concat([node]);\n        const { c: connected, u: unconnected } = getNeighbors(grid, visited, node);\n        if (connected.length > 0) {\n            let rn = randomSelect(connected);\n            connect(grid, node, connected[rn]);\n            connected.splice(rn);\n        }\n        path = path.concat(unconnected);\n\n    }\n}\n\nfunction randomSelect(path) {\n    return randomInt(0, path.length - 1);\n}\n\nfunction validate(grid, points) {\n    let height = grid.length, width = grid[0].length;\n    let pRe = [];\n    for (let index = 0; index < points.length; index++) {\n        let { row, col } = points[index];\n        if ((0 <= row && row < height && 0 <= col && col < width)) {\n            pRe.push(points[index]);\n        }\n    }\n    return pRe;\n\n}\n\nfunction isVisited(visited, node) {\n    let { row: nr, col: nc } = node;\n    for (let index = 0; index < visited.length; index++) {\n        let { row: ir, col: ic } = visited[index];\n        if (nr === ir && nc === ic) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction getNeighbors(grid, visited, node) {\n    let { row, col } = node;\n    let neighbors = [{ row: row + 2, col: col }, { row: row - 2, col: col }, { row: row, col: col + 2 }, { row: row, col: col - 2 }];\n    neighbors = validate(grid, neighbors.slice());\n    let connected = [];\n    let unconnected = [];\n    neighbors.forEach(neighbor => {\n        if (isVisited(visited, neighbor)) {\n            connected.push(neighbor);\n        }\n        else {\n            unconnected.push(neighbor);\n        }\n    });\n    return { c: connected, u: unconnected };\n}\n\nfunction connect(grid, a, b) {\n    let { row: ar, col: ac } = a;\n    let { row: br, col: bc } = b;\n    let row = (ar + br) / 2;\n    let col = (ac + bc) / 2;\n    makeWall(grid, row, col, false);\n}\n\nfunction makeWall(grid, row, col, isW) {\n    const node = grid[row][col];\n    const newNode = {\n        ...node,\n        isWall: isW,\n    }\n    grid[row][col] = newNode;\n}\n\nexport { dijkstra, BFS, DFS, AStar, getShortestPath, primMaze };","import React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, BFS, DFS, AStar, getShortestPath, primMaze } from '../Algorithm/pathfindingAlgorithms';\nimport './PathFindingVisualizer.css';\n\nexport default class PathFindingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            grid: [],\n            FR: 7,\n            FC: 31,\n            mouseIsPressed: false,\n            changingStart: false,\n            changingFinish: false,\n            visualized: false,\n            rendering: false,\n            numRow: 17,\n            numCol: 37,\n            SR: 7,\n            SC: 5,\n            speed: 'median',\n            delays: {'slow': 17, 'median': 7, 'fast': 3},\n            currentAlgorithm: -1,\n            algorithms: ['BFS', 'Dijkstra', 'A Star', 'DFS'],\n            pathfindingAlgorithms: [BFS, dijkstra, AStar, DFS]\n        };\n        this.visualizePathfinding = this.visualizePathfinding.bind(this);\n        this.clearVisualizer = this.clearVisualizer.bind(this);\n        this.setAlgorithm = this.setAlgorithm.bind(this);\n        this.props.getFunctions(this.visualizePathfinding, this.clearVisualizer, this.setAlgorithm, this.state.algorithms);\n    }\n\n    setAlgorithm(algoId) {\n        this.setState({ currentAlgorithm: algoId });\n    }\n\n    isRendering() {\n        return this.state.rendering;\n    }\n\n    componentDidMount() {\n        const grid = this.initializeGrid(false);\n        this.setState({\n            grid: grid,\n            currentAlgorithm: -1\n        })\n        this.state.grid = grid;\n    }\n\n    initializeGrid(clearWall) {\n        const grid = [];\n        for (let row = 0; row < this.state.numRow; row++) {\n            const currentRow = [];\n            for (let col = 0; col < this.state.numCol; col++) {\n                let isW = false;\n                const element = document.getElementById(`node-${row}-${col}`);\n                if (element && (element.className === 'node node-path' || element.className === 'node node-visited')) {\n                    element.className = 'node';\n                }\n                if (!clearWall && element && element.className === 'node node-wall') {\n                    isW = true;\n                }\n                currentRow.push(this.createNode(row, col, isW));\n            }\n            grid.push(currentRow);\n        }\n        return grid;\n    }\n\n    createNode(row, col, isW) {\n        return {\n            col,\n            row,\n            isStart: row === this.state.SR && col === this.state.SC,\n            isFinish: row === this.state.FR && col === this.state.FC,\n            distance: Infinity,\n            heuristic: Infinity,\n            isVisited: false,\n            isWall: isW,\n            previousNode: null,\n        };\n    }\n\n    handleMouseDown(row, col) {\n        if (row === this.state.SR && col === this.state.SC) {\n            this.setState({ changingStart: true });\n        }\n        else if (row === this.state.FR && col === this.state.FC) {\n            this.setState({ changingFinish: true });\n        }\n        else if (!this.state.rendering) {\n            this.updateGridWithWall(this.state.grid, row, col);\n            this.setState({ mouseIsPressed: true });\n            this.clearVisitedAndPath();\n        }\n    }\n\n    handleMouseEnter(row, col) {\n        if (this.state.mouseIsPressed) {\n            this.updateGridWithWall(this.state.grid, row, col);\n            this.setState({ mouseIsPressed: true });\n        }\n\n        else if (this.state.changingStart && !(row === this.state.FR && col === this.state.FC)) {\n            const start = document.getElementById(`node-${this.state.SR}-${this.state.SC}`);\n            if (start) {\n                start.className = 'node';\n                start.isStart = false;\n                this.state.grid[this.state.SR][this.state.SC].isStart = false;\n            }\n            const newStart = document.getElementById(`node-${row}-${col}`);\n            if (newStart) {\n                newStart.isStart = true;\n                newStart.className = 'node node-start';\n                this.state.grid[row][col].isStart = true;\n            }\n            this.setState({ SR: row, SC: col });\n            this.clearVisitedAndPath();\n\n        }\n        else if (this.state.changingFinish && !(row === this.state.SR && col === this.state.SC)) {\n            const finish = document.getElementById(`node-${this.state.FR}-${this.state.FC}`);\n            if (finish) {\n                finish.className = 'node';\n                finish.isFinish = false;\n                this.state.grid[this.state.FR][this.state.FC].isFinish = false;\n            }\n            const newFinish = document.getElementById(`node-${row}-${col}`);\n            if (newFinish) {\n                newFinish.isFinish = true;\n                newFinish.className = 'node node-finish';\n                this.state.grid[row][col].isFinish = true;\n            }\n            this.setState({ FR: row, FC: col });\n            this.clearVisitedAndPath();\n        }\n\n    }\n\n    handleMouseUp() {\n        this.setState({\n            changingStart: false,\n            changingFinish: false,\n            mouseIsPressed: false\n        });\n    }\n\n    updateGridWithWall(grid, row, col) {\n        const node = grid[row][col];\n        const newNode = {\n            ...node,\n            isWall: !node.isWall\n        }\n        grid[row][col] = newNode;\n    }\n\n    visualizePathfinding() {\n        if (this.state.currentAlgorithm === -1) return;\n        if (this.state.rendering) return;\n\n        this.setState({ visualized: true, rendering: true });\n        this.props.setVisualizerRendering(true);\n        let g = this.initializeGrid(false);\n        this.setState({\n            grid: g\n        });\n        this.state.grid = g;\n        const grid = this.state.grid;\n        const start = grid[this.state.SR][this.state.SC];\n        const finish = grid[this.state.FR][this.state.FC];\n        const visitedInOrder = this.state.pathfindingAlgorithms[this.state.currentAlgorithm](grid, start, finish);\n        const shortedPath = getShortestPath(finish);\n        for (let i = 0; i < visitedInOrder.length; i++) {\n            setTimeout(() => {\n                const node = visitedInOrder[i];\n                if (!node.isStart && !node.isFinish)\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n            }, this.state.delays[this.state.speed] * i);\n        }\n\n        for (let i = 0; i < shortedPath.length; i++) {\n            setTimeout(() => {\n                const node = shortedPath[i];\n                if (!node.isStart && !node.isFinish)\n                    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-path';\n            }, this.state.delays[this.state.speed] * visitedInOrder.length + 50 * i);\n\n        }\n        setTimeout(() => {\n            this.setState({ rendering: false });\n            this.props.setVisualizerRendering(false);\n        }, this.state.delays[this.state.speed] * visitedInOrder.length + 50 * shortedPath.length);\n\n    }\n\n    clearVisualizer() {\n        if (!this.state.rendering)\n            this.setState({ grid: this.initializeGrid(true), visualized: false });\n\n    }\n\n    clearVisitedAndPath(){\n        for(let row = 0; row < this.state.numRow; row++){\n            for(let col = 0; col < this.state.numCol; col++){\n                let n = document.getElementById(`node-${row}-${col}`);\n                console.log(n);\n                if(n && (n.className === 'node node-visited' || n.className === 'node node-path')){\n                    n.className = 'node';\n                }\n            }\n        }\n    }\n\n    setSpeed(speed){\n        this.setState({speed: speed});\n    }\n\n    render() {\n\n        const grid = this.state.grid;\n\n        return (\n            <>\n                <div className=\"grid\">\n                    {grid.map((row, rowId) => {\n                        return (\n                            <div key={rowId}>\n                                {row.map((node, nodeId) => {\n                                    const { row, col, isFinish, isStart, isWall } = node;\n                                    return (\n                                        <Node\n                                            key={nodeId}\n                                            row={row}\n                                            col={col}\n                                            isStart={isStart}\n                                            isFinish={isFinish}\n                                            isWall={isWall}\n                                            mouseIsPressed={this.state.mouseIsPressed}\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                                            onMouseUp={() => this.handleMouseUp()}\n                                        ></Node>\n                                    )\n                                })\n                                }\n                            </div>\n                        );\n                    })\n                    }\n                </div>\n                <div class={\"dropdown\"} style={{marginTop: \"10px\"}}>\n                        <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" disabled={this.state.rendering} id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{marginRight:\"5px\", height: \"30px\", width: \"150px\" }}>\n                            <p style={{ \"margin-top\": \"-5px\" }}>{`Speed: ${this.state.speed}`}</p>\n                        </button>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                            <li>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{height: \"30px\"}} onClick={() => this.setSpeed('slow')}><p style={{ \"margin-top\": \"-5px\" }}>{`slow`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{height: \"30px\"}} onClick={() => this.setSpeed('median')}><p style={{ \"margin-top\": \"-5px\" }}>{`median`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{height: \"30px\"}} onClick={() => this.setSpeed('fast')}><p style={{ \"margin-top\": \"-5px\" }}>{`fast`}</p></button>\n                            </li>\n                        </div>\n                        <button\n                        onClick={() => { \n                            primMaze(this.state.grid);\n                            this.setState({ finish: false});\n                            this.clearVisitedAndPath();\n                        }}\n                        type=\"button\" class=\"btn btn-outline-dark\"\n                        style={{marginLeft: \"5px\", \"height\": \"30px\"}}\n                        disabled={this.state.rendering}>\n                        <p style={{ \"margin-top\": \"-6px\" }}>generate maze</p>\n                        \n                    </button>\n                </div>\n            </>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './Pile.css';\n\nexport default class Pile extends Component {\n    render() {\n\n        const {\n            val,\n            isChanging,\n            isPivot,\n            finished,\n            index,\n            size,\n            colorSetIndex,\n            changingColors = [`rgb(228, 230, 120)`, `rgb(155, 147, 229)`, `rgb(248, 250, 140)`],\n            offSet = { 'small': 20, 'median': 0, 'large': 0 },\n            normalColors = [`rgb(200,${(1 - val / 45) * 255 + 50 + offSet[size]}, 255)`, `rgb(250,200, ${(1 - val / 80) * 255 + offSet[size]})`, `rgb( ${(1 - val / 80) * 255 + offSet[size]},200,250)`],\n        } = this.props;\n\n        let extraClassName = '';\n        if (isChanging) {\n            extraClassName = '-changing';\n        }\n        if (finished) {\n            extraClassName = '-finished';\n        }\n        let color = extraClassName === '-changing' ? changingColors[colorSetIndex] : normalColors[colorSetIndex];\n        if (!this.props.finished && this.props.isPivot) color = 'rgb(240, 190, 149)';\n        let lineOff = -20 * this.props.index;\n        let heights = { 'small': 14, 'median': 10, 'large': 8 };\n        let indicatorLength = { 'small': 420, 'median': 620, 'large': 820 };\n        return (\n            <>\n                <div\n                    className={'pile' + extraClassName}\n                    style={{ height: `${val * heights[this.props.size]}px`, background: color }}\n\n                >\n                    <p className='value'>{val}</p>\n                    {!this.props.finished && this.props.isPivot && <svg height=\"100\" width={indicatorLength[size] + 100} style={{ position: \"absolute\", display: \"flex\", marginTop: \"-31px\", marginLeft: `${lineOff}px` }}>\n                        <line x1=\"0\" y1=\"0\" x2={indicatorLength[size]} y2=\"0\" style={{ stroke: \"grey\", strokeWidth: \"3px\" }}></line>\n                    </svg>}\n                </div>\n\n            </>\n\n        );\n    }\n\n}","function swap(piles, a, b) {\n    const tempVal = piles[a];\n    piles[a] = piles[b];\n    piles[b] = tempVal;\n}\n\nfunction selectionSort(piles) {\n\n    let statesInOrder = [];\n    for (let i = 0; i < piles.length - 1; i++) {\n        let minId = i;\n        for (let j = i + 1; j < piles.length; j++) {\n            if (piles[j] < piles[minId]) {\n                minId = j;\n            }\n            const temp = { piles: piles.slice(), changing: [j] };\n            statesInOrder.push(temp);\n\n        }\n        swap(piles, minId, i);\n        const temp = { piles: piles.slice(), changing: [minId, i] };\n        statesInOrder.push(temp);\n    }\n    return statesInOrder;\n}\n\nfunction bubbleSort(piles) {\n    let statesInOrder = [];\n    let n = piles.length;\n    while (n > 1) {\n        let newN = 0;\n        for (let i = 1; i < n; i++) {\n            if (piles[i - 1] > piles[i]) {\n                swap(piles, i - 1, i);\n                newN = i;\n                const temp = { piles: piles.slice(), changing: [i] };\n                statesInOrder.push(temp);\n            }\n        }\n        n = newN;\n    }\n    return statesInOrder;\n}\n\nfunction insertionSort(piles) {\n    let statesInOrder = [];\n    for (let i = 1; i < piles.length; i++) {\n        for (let j = i; j > 0 && piles[j - 1] > piles[j]; j--) {\n            swap(piles, j, j - 1);\n            const temp = { piles: piles.slice(), changing: [j - 1] };\n            statesInOrder.push(temp);\n        }\n    }\n    console.log(statesInOrder);\n    return statesInOrder;\n}\n\nfunction mergeSort(piles) {\n    let statesInOrder = [];\n    mergeSortHelper(piles, 0, piles.length - 1, statesInOrder);\n    return statesInOrder;\n}\n\nfunction mergeSortHelper(piles, start, end, statesInOrder) {\n    if (start === end) return;\n    const mid = Math.floor((start + end) / 2);\n    mergeSortHelper(piles, start, mid, statesInOrder);\n    mergeSortHelper(piles, mid + 1, end, statesInOrder);\n    merge(piles, start, mid, end, statesInOrder);\n}\n\nfunction merge(piles, start, mid, end, statesInOrder) {\n    let k = start, i = start, j = mid + 1;\n    let pilesC = piles.slice();\n    while (i <= mid && j <= end) {\n        if (pilesC[i] <= pilesC[j]) {\n            piles[k++] = pilesC[i++];\n        }\n        else {\n            piles[k++] = pilesC[j++];\n        }\n        const temp = { piles: piles.slice(), changing: [i, j, k] };\n        statesInOrder.push(temp);\n\n    }\n    while (i <= mid) {\n        piles[k++] = pilesC[i++];\n        const temp = { piles: piles.slice(), changing: [i, k] };\n        statesInOrder.push(temp);\n    }\n    while (j <= end) {\n        piles[k++] = pilesC[j++];\n        const temp = { piles: piles.slice(), changing: [j, k] };\n        statesInOrder.push(temp);\n    }\n}\n\n\nfunction quickSort(piles) {\n    let statesInOrder = [];\n    quickSortHelper(piles, 0, piles.length - 1, statesInOrder);\n    return statesInOrder;\n}\n\nfunction quickSortHelper(piles, start, end, statesInOrder) {\n    if (start < end) {\n        let pivot = partition(piles, start, end, statesInOrder);\n        quickSortHelper(piles, start, pivot - 1, statesInOrder);\n        quickSortHelper(piles, pivot + 1, end, statesInOrder);\n    }\n}\n\nfunction partition(piles, start, end, statesInOrder) {\n    let pivot = piles[end];\n    let i = start - 1;\n    for (let j = start; j <= end - 1; j++) {\n        if (piles[j] < pivot) {\n            i++;\n            swap(piles, i, j);\n            const temp = { piles: piles.slice(), changing: [i, j], pivot: pivot};\n            if(pivot !== piles.length+4) statesInOrder.push(temp);\n        }\n    }\n    swap(piles, i + 1, end);\n    const temp = { piles: piles.slice(), changing: [i + 1, end], pivot: pivot};\n    if(pivot !== piles.length+4) statesInOrder.push(temp);\n    return i + 1;\n}\n\nexport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort };","import React, { Component } from 'react';\nimport './SortingVisualizer.css';\nimport Pile from './Pile/Pile';\nimport { selectionSort, bubbleSort, insertionSort, mergeSort, quickSort } from '../Algorithm/sortingAlgorithms';\n\nexport default class SortingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            piles: [],\n            numPiles: 30,\n            finished: false,\n            maxPile: 80,\n            changingPiles: [],\n            pileDelayTimes: [30, 40, 40, 80, 80],\n            DelayTimesSizeBased: {'fast': [15, 20, 20, 40, 40], 'median': [30, 40, 40, 80, 80], 'slow': [60, 80, 80, 160, 160]},\n            colorSetIndex: getRandomInt(0, 3),\n            currentAlgorithm: -1,\n            descriptions: ['Selection Sort: repeatedly find the minimum element from the unsorted part and append it to the sorted part.', \n                           'Bubble Sort: repeatedly swap the adjacent elements if they are in wrong order.',\n                           'Insertion Sort: repeatedly place value from the unsorted part at the correct position in the sorted part(by finding the closest left-side element that is smaller than it).',\n                           'Merge Sort: divide the array into two halves, sort them recursively using merge sort, and then merge the two halves.',\n                           'Quick Sort: choose an element as pivot, arrange the array such that the elements smaller than pivot are on its left and others are on its right, sort the two halves recursively.'],\n            unsortedPiles: [],\n            speed: \"median\",\n            size: \"median\",\n            algorithms: ['Selection Sort', 'Bubble Sort', 'Insertion Sort', 'Merge Sort', 'Quick Sort'],\n            sortingAlgorithms: [selectionSort, bubbleSort, insertionSort, mergeSort, quickSort]\n        };\n        this.randomizePiles = this.randomizePiles.bind(this);\n        this.visualizeSorting = this.visualizeSorting.bind(this);\n        this.setAlgorithm = this.setAlgorithm.bind(this);\n        this.props.getFunctions(this.visualizeSorting, this.randomizePiles, this.setAlgorithm, this.state.algorithms);\n    }\n\n    componentDidMount() {\n        const piles = this.initializePiles();\n        this.setState({\n            piles: piles,\n        });\n        this.setState({ piles: piles, unsortedPiles: piles.slice() });\n    }\n\n    setAlgorithm(algoId) {\n        if (this.state.unsortedPiles !== []) {\n            this.setState({ finished: false, changingPiles: [], piles: this.state.unsortedPiles, pivot: -1 });\n        }\n        this.setState({ currentAlgorithm: algoId });\n    }\n\n    initializePiles() {\n        let piles = [];\n        for (let i = 0; i < this.state.numPiles; i++) {\n            piles.push(i + 5);\n        }\n\n        for (let i = 0; i < this.state.numPiles; i++) {\n            let j = getRandomInt(0, i);\n            let temp = piles[i];\n            piles[i] = piles[j];\n            piles[j] = temp;\n        }\n        piles.push(this.state.numPiles + 5);\n        return piles;\n    }\n\n    visualizeSorting() {\n        if (this.state.currentAlgorithm === -1) {\n            return;\n        }\n        if (this.state.rendering) return;\n        if (this.state.finished) {\n            this.state.finished = false;\n            this.state.changingPiles = [];\n            this.state.piles = this.state.unsortedPiles;\n        }\n        this.setState({ rendering: true });\n        this.props.setVisualizerRendering(true);\n        const piles = this.state.piles.slice();\n\n        const statesInOrder = this.state.sortingAlgorithms[this.state.currentAlgorithm](piles);\n        for (let i = 0; i < statesInOrder.length; i++) {\n            const { piles: state, changing: changingPiles, pivot } = statesInOrder[i];\n            setTimeout(() => {\n                this.setState({ piles: state, changingPiles: changingPiles, pivot: pivot });\n            }, this.state.pileDelayTimes[this.state.currentAlgorithm] * i);\n\n        }\n        setTimeout(() => {\n            this.setState({ rendering: false, finished: true });\n            this.props.setVisualizerRendering(false);\n        }, this.state.pileDelayTimes[this.state.currentAlgorithm] * statesInOrder.length);\n    }\n\n    randomizePiles() {\n        if (this.state.rendering) return;\n        this.setState({ finished: false, changingPiles: [], colorSetIndex: getRandomInt(0, 3) });\n        const piles = this.initializePiles();\n        this.setState({ piles: piles, unsortedPiles: piles.slice() });\n    }\n\n    setSpeed(speed) {\n        this.setState({ speed: speed, pileDelayTimes: this.state.DelayTimesSizeBased[speed] });\n    }\n\n    setSize(s) {\n        if(this.state.size === s) return;\n        let sizes = {\"small\": 20, \"median\": 30, \"large\": 40};\n        this.setState({ size: s, numPiles: sizes[s] });\n        this.state.numPiles = sizes[s];\n        const piles = this.initializePiles();\n        this.setState({ finished: false, changingPiles: [], piles: piles, unsortedPiles: piles.slice() });\n    }\n\n    render() {\n        const piles = this.state.piles;\n        let nSquare = <p>Time Complexity: θ(n&#178;)</p>\n        let nLogn = <p>Time Complexity: θ(n·log(n))</p>\n        return (\n            <>\n\n                <div className='piles' class=\"container\">\n                    {\n\n                        piles.map((pile, pileId) => {\n                            return (\n                                <Pile\n                                    dummy={pileId === this.state.numPiles}\n                                    finished={this.state.finished}\n                                    className='pile'\n                                    key={pileId}\n                                    index={pileId}\n                                    val={pile}\n                                    size={this.state.size}\n                                    isChanging={this.state.changingPiles.indexOf(pileId) !== -1}\n                                    isPivot={this.state.pivot === pile}\n                                    colorSetIndex={this.state.colorSetIndex}\n                                ></Pile>\n                            )\n                        })\n\n                    }\n\n                </div>\n                \n                <div class=\"d-flex\" style={{marginLeft: \"37%\", marginTop: \"10px\"}}>\n                    <div class=\"dropdown 1\">\n                        <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" disabled={this.state.rendering} id=\"dropdownMenuSpeed\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ marginRight: \"5px\", height: \"30px\", width: \"150px\" }}>\n                            <p style={{ \"margin-top\": \"-5px\" }}>{`Speed: ${this.state.speed}`}</p>\n                        </button>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuSpeed\">\n                            <li>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSpeed('slow')}><p style={{ \"margin-top\": \"-5px\" }}>{`slow`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSpeed('median')}><p style={{ \"margin-top\": \"-5px\" }}>{`median`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSpeed('fast')}><p style={{ \"margin-top\": \"-5px\" }}>{`fast`}</p></button>\n                            </li>\n                        </div>\n                    </div>\n                    <div class=\"dropdown 1\">\n                        <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" disabled={this.state.rendering} id=\"dropdownMenuSize\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ marginLeft: \"5px\", height: \"30px\", width: \"150px\" }}>\n                            <p style={{ \"margin-top\": \"-5px\" }}>{`Size: ${this.state.size}`}</p>\n                        </button>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuSize\">\n                            <li>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSize('small')}><p style={{ \"margin-top\": \"-5px\" }}>{`small`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSize('median')}><p style={{ \"margin-top\": \"-5px\" }}>{`median`}</p></button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setSize('large')}><p style={{ \"margin-top\": \"-5px\" }}>{`large`}</p></button>\n                            </li>\n                        </div>\n                    </div>\n                </div>\n                \n                <h6 class='algoDescription'>{this.state.currentAlgorithm === -1 ? \"Welcome to Sorting. Select an algorithm first.\" : this.state.descriptions[this.state.currentAlgorithm]}</h6>\n                <h5 class='algoComplexity' style={{marginTop: \"-4.5%\", color:\"rgb(90,90,90)\"}}>{\n                    this.state.currentAlgorithm === -1 ? \n                        \"\" : this.state.currentAlgorithm < 3 ?\n                            nSquare : nLogn\n                }</h5>\n            </>\n        );\n    }\n\n}\n\nfunction getRandomInt(min, range) {\n    return Math.floor(Math.random() * range) + min;\n}","class Perceptron {\n    constructor(n, alpha) {\n        this.weights = new Array(n);\n        \n        for (let i = 0; i < this.weights.length; i++) {\n            this.weights[i] = random(-1, 1);\n        }\n        this.alpha = alpha;\n    }\n\n    /**\n     * train the perceptron, adjust weights based on error\n     * @param {*} inputs \n     * @param {*} desired \n     */\n    train(inputs, desired) {\n        let guess = this.feedforward(inputs);\n        \n        let error = desired - guess;\n\n        for (let i = 0; i < this.weights.length; i++) {\n            this.weights[i] += this.alpha * error * inputs[i];\n        }\n    }\n\n    /**\n     * @param {*} inputs \n     * @returns the predicted result\n     */\n    feedforward(inputs) {\n        let sum = 0;\n        for (let i = 0; i < this.weights.length; i++) {\n            sum += inputs[i] * this.weights[i];\n        }\n        return this.activate(sum);\n        \n    }\n\n    activate(sum) {\n        return sum > 0 ? 1 : -1;\n    }\n\n    getWeights() {\n        return this.weights;\n    }\n}\n\nfunction random(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\nexport {Perceptron, random};","import React, { Component } from 'react';\nimport { Stage, Layer, Line, Circle, Text } from 'react-konva';\nimport { Perceptron, random } from './Perceptron';\nimport './PtronVisualizer.css';\n\n/**\n * class definition of PtronVisualizer Class\n */\nexport default class PtronVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            training: new Array(1002),\n            rendering: false,\n            min: -1,\n            max: 1,\n            width: 500,\n            height: 500,\n            count: 0,\n            ptron: null,\n            xOff: 50,\n            yOff: 100,\n            M: 0.4,\n            B: 0.3,\n        }\n        this.resetVisualizer = this.resetVisualizer.bind(this);\n        this.startVisualizer = this.startVisualizer.bind(this);\n        this.props.getFunctions(this.startVisualizer, this.resetVisualizer);\n    }\n\n    /**\n     * @param {*} x \n     * @returns exact value of the origin function\n     */\n    f(x) {\n        return this.state.M * x + this.state.B;\n    }\n\n    /**\n     * map the value n from a range [as, ae] to [bs, be]\n     * @param {*} n \n     * @param {*} as \n     * @param {*} ae \n     * @param {*} bs \n     * @param {*} be \n     * @returns the mapped value\n     */\n    map(n, as, ae, bs, be) {\n        return ((n - as) / (ae - as)) * (be - bs) + bs;\n    }\n\n    initialize() {\n        this.state.ptron = new Perceptron(3, 0.006);\n        for (let i = 0; i < this.state.training.length; i++) {\n            let x = random(this.state.min, this.state.max);\n            let y = random(this.state.min, this.state.max);\n            let answer = 1;\n            if (y < this.f(x)) answer = -1;\n            this.state.training[i] = {\n                input: [x, y, 1],\n                output: answer\n            }\n        }\n    }\n\n    resetVisualizer() {\n        if (this.state.rendering) {\n            return;\n        }\n        this.setState({ count: 0 });\n        this.state.count = 0;\n    }\n\n    startVisualizer() {\n        this.setState({ rendering: true });\n        for (let i = 0; i < this.state.training.length - 1; i++) {\n            setTimeout(\n                () => {\n                    this.setState({ count: i });\n                    this.state.count = i;\n                }\n                , 25 * i);\n        }\n        setTimeout(() => {\n            this.setState({ rendering: false });\n        }, 25 * this.state.training.length)\n\n    }\n\n    /**\n     * render the scene using Konva\n     */\n    render() {\n        if (this.state.count === 0) {\n            this.initialize();\n        }\n        let min = this.state.min;\n        let max = this.state.max;\n        let ptron = this.state.ptron;\n        let x1 = this.map(min, min, max, 0, this.state.width);\n        let y1 = this.map(this.f(min), min, max, this.state.height, 0);\n        let x2 = this.map(max, min, max, 0, this.state.width);\n        let y2 = this.map(this.f(max), min, max, this.state.height, 0);\n\n        let weights = ptron.getWeights();\n        let xx1 = min;\n        let yy1 = (-weights[2] - weights[0] * xx1) / weights[1];\n        let xx2 = max;\n        let yy2 = (-weights[2] - weights[0] * xx2) / weights[1];\n\n        xx1 = this.map(xx1, min, max, 0, this.state.width);\n        yy1 = this.map(yy1, min, max, this.state.height, 0);\n        xx2 = this.map(xx2, min, max, 0, this.state.width);\n        yy2 = this.map(yy2, min, max, this.state.height, 0);\n        ptron.train(this.state.training[this.state.count].input, this.state.training[this.state.count].output);\n\n        let points = []\n\n        for (let i = 0; i < this.state.count; i++) {\n            let guess = ptron.feedforward(this.state.training[i].input);\n            let x = this.map(this.state.training[i].input[0], min, max, 0, this.state.width);\n            let y = this.map(this.state.training[i].input[1], min, max, this.state.height, 0);\n            if(i%4>0) points.push({ x: x, y: y, fill: guess < 0 });\n        }\n        \n        let aM = -weights[0] / weights[1];\n        let aB = -weights[2] / weights[1];\n        let eM = aM - this.state.M;\n        let eB = aB - this.state.B;\n        let textComponet;\n        if (this.state.count !== 0) {\n            textComponet = <><Text\n                x={550}\n                y={50}\n                text='Function Form: Y = M * X + B'\n                fontFamily='Calibri'\n                fill='black'\n                fontSize={25}\n            ></Text>\n                <Text\n                    x={550}\n                    y={80}\n                    text={`Original Function: M = ${this.state.M} B = ${this.state.B}`}\n                    fontFamily='Calibri'\n                    fill='black'\n                    fontSize={25}\n                ></Text>\n                <Text\n                    x={550}\n                    y={135}\n                    text={`Approximation:\\nM = ${aM}\\nB = ${aB}`}\n                    fontFamily='Calibri'\n                    fill='black'\n                    fontSize={25}\n                ></Text>\n                <Text\n                    x={550}\n                    y={240}\n                    text={`Error:\\nM: ${eM}\\nB:${eB}`}\n                    fontFamily='Calibri'\n                    fill='red'\n                    fontSize={25}\n                ></Text>\n                <Text\n                    x={550}\n                    y={340}\n                    text={`Count: ${this.state.count}`}\n                    fontFamily='Calibri'\n                    fill='grey'\n                    fontSize={25}\n                ></Text>\n                </>\n        }\n        else {\n            textComponet = <><Text\n                x={550}\n                y={50}\n                text=''\n                fontFamily='Calibri'\n                fill='black'\n                fontSize={25}\n            ></Text>\n                <Text\n                    x={550}\n                    y={80}\n                    text={`Original Function: M = ${this.state.M} B = ${this.state.B}`}\n                    fontFamily='Calibri'\n                    fill='black'\n                    fontSize={25}\n                ></Text>\n                <Text\n                    x={550}\n                    y={135}\n                    text={`Approximation:\\nM = ${aM}\\nB = ${aB}`}\n                    fontFamily='Calibri'\n                    fill='black'\n                    fontSize={25}\n                ></Text>\n                <Text\n                    x={550}\n                    y={240}\n                    text={`Error:\\nM: ${eM}\\nB:${eB}`}\n                    fontFamily='Calibri'\n                    fill='red'\n                    fontSize={25}\n                ></Text>\n                <Text\n                    x={550}\n                    y={340}\n                    text={`Count: ${this.state.count}`}\n                    fontFamily='Calibri'\n                    fill='grey'\n                    fontSize={25}\n                ></Text>\n                </>\n        }\n        let circles = points.map((point, pointId) => {\n            return (<Circle\n                key={pointId}\n                x={point.x + 0}\n                y={point.y + 0}\n                stroke={'black'}\n                radius={3}\n                opacity={0.7}\n                fill={point.fill ? 'black' : 'white'}\n            ></Circle>)}\n        )\n        this.state.all = (\n            <>\n                <Stage\n                    width={500 * 2}\n                    height={500 + 1}\n                    className='ptron-stage'\n                    id='stage'\n                >\n                    <Layer name=\"layer\" ref={ref => (this.state.layer = ref)}>\n                        <Line points={[0, 0, 500, 0]} stroke={'black'} ></Line>\n                        <Line points={[0, 0, 0, 0 + 500]} stroke={'black'}></Line>\n                        <Line points={[0, 0 + 500, 500 + 0, 0 + 500]} stroke={'black'} ></Line>\n                        <Line points={[500 + 0, 0, 500 + 0, 0 + 500]} stroke={'black'} strokeWidth={1}></Line>\n                        <Line\n                            points={[x1 + 0, 0 + y1, x2 + 0, 0 + y2]}\n                            stroke={'red'}\n                            strokeWidth={1}>\n                        </Line>\n                        <Line\n                            points={[xx1 + 0, 0 + yy1, xx2 + 0, 0 + yy2]}\n                            stroke={'blue'}\n                            strokeWidth={this.state.count > 0 ? 1 : 0}>\n                        </Line>\n                        {circles}\n                        {textComponet}\n                    </Layer>\n                </Stage>\n            </>\n        );\n        return this.state.all;\n    }\n\n}\n","/**\n * @param {*} p \n * @returns true at a probability of p\n */\nfunction flipCoin(p) {\n    return Math.random() < p;\n}\n\n/**\n * @param {*} a \n * @param {*} b \n * @returns Euclidean distance between a and b\n */\nfunction distance(a, b) {\n    let { x: ax, y: ay } = a;\n    let { x: bx, y: by } = b;\n    return Math.sqrt(((ax - bx) * (ax - bx) + (ay - by) * (ay - by)));\n}\n\nclass PongAgent {\n    constructor(speed, discount, epsilon, alpha) {\n        this.weights = {\n            \"min_dis_to_dot\": 0,\n            \"dis_to_panel\": 0,\n            \"num_dots\": 0,\n        };\n        this.discount = discount;\n        this.epsilon = epsilon;\n        this.alpha = alpha;\n        this.speed = speed;\n        this.featureList = [\"min_dis_to_dot\", \"dis_to_panel\", \"num_dots\"]\n    }\n\n    getMove(action) {\n        return action * this.speed;\n    }\n\n    minDisToDot(x, y, dots) {\n        let minDis = Infinity;\n        for (const dot of dots) {\n            const d = distance({ x: x, y: y }, dot);\n            if (d < minDis) {\n                minDis = d;\n            }\n        }\n        return minDis;\n    }\n\n    /**\n     * @param {*} state \n     * @param {*} action \n     * @returns the features at the state after taking the action\n     */\n    getFeatures(state, action) {\n        let { dots, x, y, px, vx, vy, terminal } = state;\n        px = px + this.getMove(action) + 50;\n        let features = {\n            \"min_dis_to_dot\": 0,\n            \"dis_to_panel\": 0,\n            \"num_dots\": 0,\n        };\n        features[\"min_dis_to_dot\"] = this.minDisToDot(x, y, dots) / Math.sqrt(600 * 600 + 550 * 550);\n        features[\"dis_to_panel\"] = Math.abs(x - px) / 600;\n        features[\"num_dots\"] = dots.length / 5;\n        return features;\n    }\n\n    /**\n     * @param {*} state \n     * @param {*} action \n     * @returns the Q value of the state after taking the action\n     */\n    getQ(state, action) {\n        if (!state) {\n            return 0;\n        }\n        let result = 0;\n        const features = this.getFeatures(state, action);\n        for (const feature of this.featureList) {\n            result += this.weights[feature] * features[feature];\n        }\n        return result;\n    }\n\n    /**\n     * update weights based on rewards.\n     * @param {*} state \n     * @param {*} action \n     * @param {*} nextState \n     * @param {*} reward \n     */\n    update(state, action, nextState, reward) {\n        if (!action) {\n            return;\n        }\n        const features = this.getFeatures(state, action)\n        const diff = reward + this.discount * this.getValue(nextState) - this.getQ(state, action);\n        \n        for (const feature of this.featureList) {\n            this.weights[feature] += this.alpha * diff * features[feature];\n        }\n    }\n\n    setWeights(weights) {\n        this.weights = weights;\n    }\n\n    actions() {\n        return [-1, 0, 1];\n    }\n\n    /**\n     * choose the \"best\" action at a probability of (1-epsilon) and a random action at a probability of (epsilon)\n     * @param {*} state \n     * @returns selected action\n     */\n    getAction(state) {\n        if (state[\"terminal\"] === true) return null;\n        const curActions = this.actions();\n\n        if (flipCoin(this.epsilon)) {\n            const action = curActions[randomSelect(curActions)];\n            return action;\n        }\n        else {\n            return this.getPolicy(state);\n        }\n\n    }\n\n    /**\n     * @param {*} state \n     * @returns the action with maximum utility\n     */\n    getPolicy(state) {\n        const curActions = this.actions();\n        let reAction = null;\n        let maxQ = -Infinity;\n        for (const a of curActions) {\n            if (this.getQ(state, a) > maxQ) {\n                maxQ = this.getQ(state, a);\n                reAction = a;\n            }\n            else if (this.getQ(state, a) === maxQ) {\n                reAction = randomSelect([a, reAction]);\n            }\n        }\n        return reAction;\n    }\n\n    getValue(state) {\n        return this.getQ(state, this.getPolicy(state));\n    }\n}\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction randomSelect(path) {\n    return randomInt(0, path.length - 1);\n}\n\nexport default PongAgent;","import React, { Component } from 'react';\nimport { Stage, Layer, Rect, Circle, Text } from 'react-konva';\nimport PongAgent from \"./PongAgent.js\";\nimport \"./PongVisualizer.css\";\n\n/**\n * definition of PongVisualizer Class\n */\nexport default class PongVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dots: [],\n            rendering: true,\n            width: 600,\n            height: 500,\n            x: null,\n            y: null,\n            r: 15,\n            vx: 0,\n            vy: 0,\n            ballSpeed: 3,\n            panelx: 0,\n            panely: 480,\n            panelSpeed: 3,\n            ballInitialized: false,\n            framecount: 0,\n            score: 0,\n            pressedLeft: false,\n            pressedRight: false,\n            finished: false,\n            gameCount: -1,\n            agent: new PongAgent(3, 0.9, 0.2, 0.2),\n            notStarted: true,\n        }\n\n        this.resetVisualizer = this.resetVisualizer.bind(this);\n        this.startVisualizer = this.startVisualizer.bind(this);\n\n        this.props.getFunctions(this.startVisualizer, this.resetVisualizer);\n\n    }\n\n    startVisualizer() {\n        this.setState({ notStarted: false });\n        this.setState({\n            rendering: false,\n            ballInitialized: false,\n            framecount: 0,\n            score: 0,\n            finished: false,\n            gameCount: 0,\n            agent: new PongAgent(3, 0.9, 0.2, 0.2),\n        });\n        this.componentDidMount();\n    }\n    resetVisualizer() {\n        this.setState({\n            rendering: false,\n            ballInitialized: false,\n            framecount: 0,\n            score: 0,\n            finished: false,\n            gameCount: 0,\n            notStarted: true,\n            agent: new PongAgent(3, 0.9, 0.2, 0.2),\n        });\n        this.componentDidMount();\n    }\n\n    componentDidMount() {\n        this.initialize();\n    }\n\n    initialize() {\n        let speed = this.state.ballSpeed;\n        let ox = randomInt(200, 480);\n        let oy = 200;\n        let ovx = [speed, -speed, 1.2 * speed, -1.2 * speed, 0.8 * speed, -0.8 * speed][randomInt(0, 5)];\n        let ovy = speed;\n        this.setState({\n            x: ox,\n            y: oy,\n            vx: ovx,\n            vy: ovy,\n            score: 0,\n            panelx: 0,\n            storedWeights: {},\n            dots: [{ x: 100, y: 100 }, { x: 200, y: 100 }, { x: 300, y: 100 }, { x: 400, y: 100 }, { x: 500, y: 100 }],\n            gameCount: this.state.gameCount + 1\n        });\n        this.state.x = ox;\n        this.state.y = oy;\n        this.state.vx = ovx;\n        this.state.vy = ovy;\n\n    }\n\n    getState() {\n        const { dots, x, y, panelx: px, vx, vy } = this.state;\n        return { dots: dots, x: x, y: y, px: px, vx: vx, vy: vy, terminal: this.state.score === 500 || this.state.finished };\n    }\n\n    updatePanel(action) {\n        if (this.state.finished) return;\n        this.movePanel(action);\n    }\n\n    updateBall() {\n        if (this.state.finished) return;\n        let { x, y, r, vx, vy, panelx } = this.state;\n        if (x === 0 && y === 0) return;\n        x = x + vx;\n        y = y + vy;\n        if (x > this.state.width - r - 5 || x < r + 5) {\n            vx = -vx;\n        }\n        if (y < r + 5) {\n            vy = -vy;\n        }\n        if (y > this.state.panely - r - 5 && y > this.state.panely - r + 5 && Math.abs(panelx - x + 50) < 50) {\n            vy = vy > 0 ? -vy : vy\n        }\n        else if (y > this.state.height - r && Math.abs(panelx - x + 50) > 50) {\n            this.setState({ score: this.state.score - 1000 });\n            this.initialize();\n            return false;\n        }\n        this.setState({\n            x: x,\n            y: y,\n            vx: vx,\n            vy: vy\n        });\n        this.state.x = x;\n        this.state.y = y;\n        this.state.vx = vx;\n        this.state.vy = vy;\n\n        return true;\n    }\n\n    updateDots() {\n        if (this.state.finished) return;\n        let score = this.state.score;\n        for (let i = 0; i < this.state.dots.length; i++) {\n            if (distance(this.state.dots[i], { x: this.state.x, y: this.state.y }) < this.state.r) {\n                this.state.dots.splice(i, 1);\n                score += 100;\n            }\n        }\n        this.setState({ score: score });\n    }\n\n    movePanel(action) {\n        if (this.state.finished) return;\n        let panelx = this.state.panelx;\n        let panelSpeed = this.state.panelSpeed;\n        if (action === -1) {\n            panelx = panelx - panelSpeed;\n        }\n        else if (action === 1) {\n            panelx = panelx + panelSpeed;\n        }\n        this.setState({ panelx: Math.min(this.state.width - 100, Math.max(0, panelx)) });\n\n    }\n\n    render() {\n        if (this.state.notStarted) {\n            return (\n                <>\n                <Stage\n                        width={this.state.width}\n                        height={this.state.height}\n                        className='pong-stage-notstarted'\n                        id='pong stage'\n                    >\n                        <Layer>\n                            <Rect width={this.state.width} height={this.state.height} stroke=\"black\" fill=\"black\"></Rect>\n                            <Text\n                                x={200}\n                                y={200}\n                                text={`Press`}\n                                fontFamily='Calibri'\n                                fill='white'\n                                fontSize={30}\n                            ></Text>\n                            <Text\n                                x={275}\n                                y={200}\n                                text={`go`}\n                                fontFamily='Calibri'\n                                fill={this.state.goMouseEnter ? 'rgb(142, 228, 213)':'white'}\n                                fontSize={30}\n                                onClick={\n                                    ()=>{this.setState({notStarted:false})}\n                                }\n                                onMouseEnter={\n                                    ()=>{this.setState({goMouseEnter:true})}\n                                }\n                                onMouseLeave={\n                                    ()=>{this.setState({goMouseEnter:false})}\n                                }\n                            ></Text>\n                            <Text\n                                x={315}\n                                y={200}\n                                text={`to start.`}\n                                fontFamily='Calibri'\n                                fill='white'\n                                fontSize={30}\n                            ></Text>\n                        </Layer>\n                        \n                    </Stage>\n                    <div class=\"pongDescription\">\n                        <h4 style={{ marginTop: \"0px\", marginLeft: \"650px\", \"text-align\": \"left\", fontFamily: \"monospace\" }}>\n                            <br /><br /><br /><br />\n                            This is a simple illustration of Reinforcement Learning, \"Apporixmate Q Learning\" specifically.<br/><br/>\n                            \n                            Our agent is given \"vision\" to current distance from the panel to the ball, distance from the\n                            ball to the nearest dot, and the number of dots remaining. The agent may try some random moves initially,\n                            and get \"rewards\"(positive score) and \"punishments\"(negative score) when eating the dots and dying.<br/><br/>\n\n                            After some trials, our agent would appear to know that bouncing the ball back would eventually lead it to \"rewards\", \n                            and manage to do that to finally win the game (eating all 5 dots).\n                        </h4>\n                    </div>\n                    </>\n            );\n        }\n        let { \"min_dis_to_dot\": w1,\n            \"dis_to_panel\": w2,\n            \"num_dots\": w3 } = this.state.agent.weights;\n        if (!this.notStarted && this.state.score !== 500 && !this.state.finished) {\n            setTimeout(() => {\n                let agent = this.state.agent;\n                if (this.state.gameCount > 10) agent.training = false;\n                const state = this.getState();\n                const action = agent.getAction(state);\n                const curScore = this.state.score;\n                const curGameCount = this.state.gameCount;\n\n                this.updateBall();\n                this.updateDots();\n                this.updatePanel(action);\n\n                const nextState = this.getState();\n                const reward = 10 + this.state.score - curScore + (-1000) * (this.state.gameCount - curGameCount);\n                agent.update(state, action, nextState, reward);\n\n                if (this.state.score === 500) {\n                    this.setState({ finished: true });\n                }\n                this.state.framecount += 1;\n\n            }, 10 * this.state.framecount);\n            if (!isNaN(w1) && !this.state.finished) {\n                this.state.storedWeights = {\n                    \"min_dis_to_dot\": w1,\n                    \"dis_to_panel\": w2,\n                    \"num_dots\": w3\n                };\n            }\n        }\n        const { x, y } = this.state;\n        const dots = this.state.dots;\n\n\n        if (this.state.finished) {\n            let { \"min_dis_to_dot\": w1,\n                \"dis_to_panel\": w2,\n                \"num_dots\": w3 } = this.state.storedWeights;\n            if (this.state.rendering) {\n                this.props.setVisualizerRendering(false);\n                this.state.rendering = false;\n            }\n            return (\n                <>\n                    <Stage\n                        width={this.state.width}\n                        height={this.state.height}\n                        className='pong-stage'\n                        id='pong stage'\n                    >\n                        <Layer>\n                            <Rect width={this.state.width} height={this.state.height} stroke=\"black\" fill=\"black\"></Rect>\n                            <Text\n                                x={250}\n                                y={200}\n                                text={`Win!`}\n                                fontFamily='Calibri'\n                                fill='white'\n                                fontSize={50}\n                            ></Text>\n                        </Layer>\n                    </Stage>\n                    <div>\n                        <h4 style={{ marginTop: \"0px\", marginLeft: \"700px\", \"text-align\": \"left\", fontFamily: \"monospace\" }}>\n                            <br /><br /><br /><br />\n                            {\"Your agent's weights:\"}<br />\n                            <div class=\"w-text\">\n                                <p >{`w1: min distance to dot:`}<br /><p class=\"num\">{w1}</p></p>\n                                <p>{`w2: distance to between the ball and the panel:`}<br /><p class=\"num\">{w2}</p></p>\n                                <p>{`w3: number of dots remaining:`}<br /><p class=\"num\">{w3}</p></p></div>\n                        </h4>\n                    </div></>\n            );\n        }\n\n        return (\n            <>\n                <div>\n                    <Stage\n                        width={this.state.width}\n                        height={this.state.height}\n                        className='pong-stage'\n                        id='pong stage'\n                    >\n                        <Layer>\n                            <Rect width={this.state.width} height={this.state.height} stroke=\"black\" fill=\"black\"></Rect>\n\n                            {dots.map((dot, dotId) => {\n                                return (\n                                    <Circle\n                                        key={dotId}\n                                        x={dot[\"x\"]}\n                                        y={dot[\"y\"]}\n                                        stroke={'white'}\n                                        fill={\"white\"}\n                                        radius={5}\n                                    ></Circle>)\n                            })\n                            }\n                            <Circle\n                                x={x}\n                                y={y}\n                                radius={this.state.r}\n                                stroke={'white'}\n                                fill={\"white\"}>\n                            </Circle>\n                            <Rect x={this.state.panelx} y={this.state.panely} width={100} height={10} stroke={'white'}\n                                fill={\"white\"}></Rect>\n                            <Text\n                                x={10}\n                                y={15}\n                                text={`Score: ${this.state.score}`}\n                                fontFamily='Calibri'\n                                fill='white'\n                                fontSize={25}\n                            ></Text>\n                        </Layer>\n                    </Stage></div>\n                <div>\n                    <h4 style={{\n                        marginTop: \"0px\", marginLeft: \"700px\", \"text-align\": \"left\", fontFamily: \"monospace\", fontSize: \"25px\"\n                    }}>\n                        <br /><br /><br /><br />\n                        {\"Your agent's weights:\"}<br />\n                        <div class=\"w-text\">\n                            <p >{`w1: min distance to dot:`}<br /><p class=\"num\">{w1}</p></p>\n                            <p>{`w2: distance to between the ball and the panel:`}<br /><p class=\"num\">{w2}</p></p>\n                            <p>{`w3: number of dots remaining:`}<br /><p class=\"num\">{w3}</p></p></div>\n                    </h4>\n                </div>\n            </>\n        )\n    }\n}\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction distance(a, b) {\n    let { x: ax, y: ay } = a;\n    let { x: bx, y: by } = b;\n    return Math.sqrt(((ax - bx) * (ax - bx) + (ay - by) * (ay - by)));\n}","import {checkWinner} from './ConnectFour';\n\nclass MinimaxAgent {\n    constructor(depth, humanPlayer) {\n        this.depth = depth;\n        if(humanPlayer === 0){\n            this.aiPiece = \"p2\";\n            this.humanPiece = \"p1\";\n        }\n        else{\n            this.aiPiece = \"p1\";\n            this.humanPiece = \"p2\";\n        }\n    }\n\n    /**\n     * @param {*} board \n     * @returns possible actions\n     */\n    getActions(board) {\n        let actions = [];\n        for (let index = 0; index < board.length; index++) {\n            if (board[index][1] === null) {\n                actions.push(index);\n            }\n        }\n        return actions;\n    }\n\n    /**\n     * choose the action with greatest utility based on Minimax algorithm\n     * @param {*} board \n     * @returns action with greatest utility\n     */\n    getAction(board) {\n        let actions = this.getActions(board);\n        let maxVal = -Infinity;\n        let maxValAction = null;\n        board = board.map((a) => a.slice());\n        for (const action of actions) {\n            const boardCopy = board.map((a) => a.slice());\n            let val = this.minimax(this.tryMove(action, boardCopy, this.aiPiece), false, -Infinity, Infinity, this.depth);\n            if (maxVal < val || maxValAction === null) {\n                maxVal = val;\n                maxValAction = action;\n            }\n            if (maxVal === val && action === 3){\n                maxValAction = action;\n            }\n            console.log(action, val);\n        }\n        return maxValAction;\n    }\n\n    tryMove(colId, board, val) {\n        let newCol = board[colId].reverse();\n        newCol[newCol.indexOf(null)] = val;\n        newCol.reverse();\n        return board;\n    }\n\n    count(four, tar) {\n        let count = 0;\n        for (const each of four) {\n            if (each === tar) {\n                count++;\n            }\n        }\n        return count;\n    }\n\n    /**\n     * score a four-pieces line\n     * @param {*} a \n     * @param {*} b \n     * @param {*} c \n     * @param {*} d \n     * @returns score\n     */\n    scoreFour(a, b, c, d) {\n        const four = [a, b, c, d];\n        const count1 = this.count(four, this.humanPiece);\n        const countN = this.count(four, null);\n        const count2 = this.count(four, this.aiPiece);\n        if(countN === 4 || (count1 > 0 && count2 > 0)) return 0;\n        if(count1 === 4){\n            return -10e22;\n        } \n        if(count2 === 4){\n            return 10e22;\n        } \n        if(count1 === 0){\n            return Math.pow(10*count2, count2);\n        }\n        if(count2 === 0){\n            return -Math.pow(10*count1, count1);\n        }\n        return 0;\n    }\n\n    /**\n     * evaluation function, getting score by checking each possible \"four in a row\"\n     * @param {*} board \n     * @returns score of the board\n     */\n    getScore(board) {\n        let score = 0;\n        for (let c = 0; c < 7; c++) {\n            for (let r = 1; r < 4; r++) {\n                let sc = this.scoreFour(board[c][r], board[c][r + 1], board[c][r + 2], board[c][r + 3]);\n                score += sc;\n            }\n        }\n\n\n        for (let c = 0; c < 4; c++) {\n            for (let r = 1; r < 7; r++) {\n                let sc = this.scoreFour(board[c][r], board[c + 1][r], board[c + 2][r], board[c + 3][r]);\n                score += sc;\n            }\n        }\n\n        for (let c = 0; c < 4; c++) {\n            for (let r = 1; r < 4; r++) {\n                let sc = this.scoreFour(board[c][r], board[c + 1][r + 1], board[c + 2][r + 2], board[c + 3][r + 3]);\n                score += sc;\n            }\n        }\n\n        for (let c = 3; c < 7; c++) {\n            for (let r = 1; r < 4; r++) {\n                let sc = this.scoreFour(board[c][r], board[c - 1][r + 1], board[c - 2][r + 2], board[c - 3][r + 3]);\n                score += sc;\n            }\n        }\n        return score;\n    }\n\n    /**\n     * Minimax algorithm with alpha-beta pruning\n     * @param {*} board \n     * @param {*} isMax \n     * @param {*} alpha \n     * @param {*} beta \n     * @param {*} depth\n     * @returns minimax utility \n     */\n    minimax(board, isMax, alpha, beta, depth) {\n        board = board.map((a) => a.slice());\n\n        if (checkWinner(board) || depth === 0) {\n            let score = this.getScore(board);\n            return score;\n        }\n\n        let actions = this.getActions(board);\n\n        if (isMax) {\n            let val = -Infinity;\n            for (const action of actions) {\n                const boardCopy = board.map((a) => a.slice());\n                val = Math.max(val, this.minimax(this.tryMove(action, boardCopy, this.aiPiece), false, alpha, beta, depth - 1));\n\n                if (val >= beta) {\n                    return val;\n                }\n                alpha = Math.max(alpha, val);\n            }\n            return val;\n        }\n        else {\n            let val = Infinity;\n            for (const action of actions) {\n                const boardCopy = board.map((a) => a.slice());\n                val = Math.min(val, this.minimax(this.tryMove(action, boardCopy, this.humanPiece), true, alpha, beta, depth - 1));\n                if (val <= alpha) {\n                    return val;\n                }\n                beta = Math.min(beta, val);\n            }\n            return val;\n        }\n    }\n}\n\nexport default MinimaxAgent;","import React, { Component } from 'react';\nimport MinimaxAgent from './MinimaxAgent';\nimport \"./ConnectFour.css\"\n\n/**\n * @param {*} props \n * @returns Picec Object\n */\nfunction Piece(props) {\n    return (\n        <div className={props.id === 0 ? \"virtual-piece\" : \"piece\"}>\n            <div\n                className={(props.id === 0 ? \"v\" : \"\") + `${props.val}` + (props.finished && props.val !== null ? \"finished\" : \"\")}\n            ></div>\n        </div>\n    );\n}\n\n/**\n * @param {*} props \n * @returns Col Object\n */\nfunction Col(props) {\n    return (\n        <div\n            className=\"col\" onClick={() => props.handleClick()} onMouseEnter={() => props.handleEnter()} onMouseLeave={() => props.handleLeave()}>\n            {[...Array(props.pieces.length)].map((x, y) => {\n                return <Piece key={y} val={props.pieces[y]} id={y} finished={props.finished}></Piece>\n            }\n            )}\n        </div >\n    );\n}\n\n/**\n * definition of ConnectFour Class\n */\nexport default class ConnectFour extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPlayer: 0,\n            aiPlayer: 1,\n            humanPlayer: 0,\n            humanPiece: \"p1\",\n            board: new Array(7).fill(new Array(7).fill(null)),\n            lastBoards: [],\n            colors: [\"p1\", \"p2\"],\n            winner: null,\n            depth: 4,\n            minimaxAgent: new MinimaxAgent(4, 0),\n        };\n        this.reset = this.reset.bind(this);\n        this.props.getFunctions(() => { }, this.reset);\n    }\n\n    reset() {\n        this.setState({\n            currentPlayer: 0,\n            board: new Array(7).fill(new Array(7).fill(null)),\n            lastBoards: [],\n            colors: [\"p1\", \"p2\"],\n            winner: null,\n        });\n    }\n\n    undo() {\n        if (this.state.lastBoards.length) {\n            this.setState({\n                board: this.state.lastBoards.pop(),\n                currentPlayer: this.state.humanPlayer,\n            });\n\n        }\n    }\n\n    setStartingPlayer(player) {\n        if (player === \"human\") {\n            this.setState({\n                aiPlayer: 1,\n                humanPlayer: 0,\n                humanPiece: \"p1\",\n                minimaxAgent: new MinimaxAgent(this.state.depth, 0),\n            });\n        }\n        else {\n            this.setState({\n                aiPlayer: 0,\n                humanPlayer: 1,\n                humanPiece: \"p2\",\n                minimaxAgent: new MinimaxAgent(this.state.depth, 1),\n            });\n        }\n        this.reset();\n    }\n\n    setDepth(d) {\n        this.setState({ depth: d, minimaxAgent: new MinimaxAgent(d, this.state.humanPlayer) });\n    }\n\n    handleClick(colId) {\n        if (this.state.currentPlayer === this.state.aiPlayer) return;\n        if (!this.state.winner) {\n            this.state.lastBoards.push(this.state.board.map((a) => a.slice()));\n            this.move(colId);\n        }\n    }\n\n    AITakeMove() {\n        if (checkWinner(this.state.board) === null && this.state.currentPlayer === this.state.aiPlayer) {\n            const boardCopy = this.state.board.map((a) => a.slice());\n            const action = this.state.minimaxAgent.getAction(boardCopy);\n            this.move(action);\n        }\n    }\n\n    handleEnter(colId) {\n        if (this.state.currentPlayer === this.state.aiPlayer) return;\n        const boardCopy = this.state.board.map((a) => a.slice());\n        boardCopy[colId][0] = this.state.colors[this.state.currentPlayer];\n        for (let index = 0; index < boardCopy.length; index++) {\n            if (index !== colId) {\n                boardCopy[index][0] = null;\n            }\n        }\n        this.setState({\n            board: boardCopy\n        });\n    }\n\n    handleLeave(colId) {\n        const boardCopy = this.state.board.map((a) => a.slice());\n        boardCopy[colId][0] = null;\n        this.setState({\n            board: boardCopy\n        });\n    }\n\n    move(colId) {\n        const boardCopy = this.state.board.map((a) => a.slice());\n\n        if (boardCopy[colId].slice(1, 7).indexOf(null) >= 0) {\n            let newCol = boardCopy[colId].reverse();\n            newCol[newCol.indexOf(null)] = this.state.colors[this.state.currentPlayer];\n            newCol.reverse();\n\n            if (this.state.depth === 6) {\n                boardCopy[colId][0] = null;\n            }\n            else if (this.state.currentPlayer === this.state.humanPlayer) {\n                boardCopy[colId][0] = this.state.colors[this.state.currentPlayer];\n            }\n            this.setState({\n                currentPlayer: Math.abs(this.state.currentPlayer - 1),\n                board: boardCopy,\n            });\n        }\n\n    }\n\n    componentDidMount() {\n        if (this.state.aiPlayer === 0) {\n            this.AITakeMove();\n        }\n    }\n\n    componentDidUpdate() {\n        const boardCopy = this.state.board.map((a) => a.slice());\n        let winner = checkWinner(boardCopy);\n        if (this.state.winner !== winner) {\n\n            for (let index = 0; index < boardCopy.length; index++) {\n                boardCopy[index][0] = null;\n            }\n            this.setState({\n                winner: winner,\n                board: boardCopy,\n            })\n        }\n        setTimeout(() => this.AITakeMove(), 200);\n    }\n\n    render() {\n        let buttons =\n            <>\n                <button\n                    style={{ position: \"absolute\", marginTop: \"460px\", marginLeft: \"100px\", height: \"30px\", width: \"130px\" }}\n                    onClick={() => this.setStartingPlayer(this.state.aiPlayer === 1 ? \"ai\" : \"human\")}\n                    type=\"button\"\n                    class=\"btn btn-outline-dark\">\n                    <p style={{ \"margin-top\": \"-5px\" }}>{`offensive: ${this.state.aiPlayer === 1 ? \"you\" : \"ai\"}`}</p>\n                </button>\n\n                <button\n                    style={{ position: \"absolute\", marginTop: \"460px\", marginLeft: \"240px\", height: \"30px\", width: \"100px\" }}\n                    onClick={() => this.undo()}\n                    type=\"button\"\n                    class=\"btn btn-outline-dark\">\n                    <p style={{ \"margin-top\": \"-5px\" }}>undo</p>\n                </button>\n                <div class={\"dropdown\"}>\n                    <button class=\"btn btn-outline-dark dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" style={{ position: \"absolute\", marginTop: \"460px\", marginLeft: \"-130px\", height: \"30px\", width: \"130px\" }}>\n                        <p style={{ \"margin-top\": \"-5px\" }}>{`Depth: ${this.state.depth}`}</p>\n                    </button>\n                    <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                        <li>\n                            <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setDepth(2)}><p style={{ \"margin-top\": \"-5px\" }}>{`Depth: 2`}</p></button>\n                            <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setDepth(4)}><p style={{ \"margin-top\": \"-5px\" }}>{`Depth: 4`}</p></button>\n                            <button type=\"button\" class=\"btn btn-light navbtn\" style={{ height: \"30px\" }} onClick={() => this.setDepth(6)}><p style={{ \"margin-top\": \"-5px\" }}>{`Depth: 6`}</p></button>\n                        </li>\n                    </div>\n                </div>\n            </>\n\n        if (this.state.winner) {\n            let cols = [...Array(this.state.board.length)].map((x, y) =>\n                <Col\n                    key={y}\n                    pieces={this.state.board[y]}\n                    handleClick={() => { }}\n                    handleEnter={() => { }}\n                    handleLeave={() => { }}\n                    finished={true}\n                ></Col>\n            );\n\n            return (\n                <div>\n                    <div className=\"game\">\n                        <div className=\"board\">\n                            <>\n                                <div className=\"col\"></div>\n                                {cols}</>\n                        </div>\n                        {buttons}\n                    </div>\n                    <h1 style={{ position: \"relative\", marginTop: \"-170px\" }}>{this.state.winner === \"tie\" ? \"Tie\" : `Winner: ${this.state.winner === this.state.humanPiece ? \"You\" : \"AI\"}`}</h1>\n                </div>\n\n            );\n        }\n\n        let cols = [...Array(this.state.board.length)].map((x, y) =>\n            <Col\n                key={y}\n                pieces={this.state.board[y]}\n                handleClick={() => this.handleClick(y)}\n                handleEnter={() => this.handleEnter(y)}\n                handleLeave={() => this.handleLeave(y)}\n                finished={false}\n            ></Col>\n        );\n\n        if (this.state.currentPlayer === this.state.aiPlayer) {\n            let loadingImg = document.getElementById(\"loadingImgT\");\n            if (loadingImg) loadingImg.className = 'loadingImgN';\n        }\n        else {\n            let loadingImg = document.getElementById(\"loadingImgT\");\n            if (loadingImg) loadingImg.className = 'loadingImgT';\n\n        }\n        return (\n            <div>\n                <div className=\"game\">\n                    <div className=\"board\">\n                        {cols}\n                    </div>\n\n                    {buttons}\n                    <img id=\"loadingImgT\" className=\"loadingImgT\" src=\"https://linkpicture.com/q/Double-Ring-1s-200px-2.gif\" height=\"100px\" width=\"100px\" style={{ marginLeft: \"10px\", position: \"absolute\", zIndex: 0 }} alt></img>;\n                    <div>\n                        <h5 class=\"connectFourDes\" style={{ position: \"absolute\", marginTop: \"160px\", marginLeft: \"30px\", textAlign: \"left\" }}>\n                            This is a chess game known as \"Connect Four\", which you<br />\n                            will need to connect four pieces to win (accept diagonals). <br />\n                            The game has \"gravity\", so wherever you put the pieces, <br />\n                            they would \"drop\" down to the bottom.<br /><br />\n                            You are competing with a \"Minimax\" AI with alpha-beta pruning.<br />\n                            Basically, it will search possible future states of the game<br />\n                            and choose the action that it think is best at the current state<br />\n                            each time. <br /><br />\n                            It is not a perfect player for this game, so try your best to<br />\n                            beat it by your \"humanity\"! <br /><br />\n                            (Depth 6 is quite slow, please wait patiently.)\n                    </h5>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n/**\n * @param {*} a \n * @param {*} b \n * @param {*} c \n * @param {*} d \n * @returns whether all four pieces are the same\n */\nfunction checkFour(a, b, c, d) {\n    return ((a !== null) && (a === b) && (a === c) && (a === d));\n}\n\n/**\n * @param {*} board \n * @returns the winner if there is a winner, null otherwise.\n */\nfunction checkWinner(board) {\n    for (let c = 0; c < 7; c++) {\n        for (let r = 1; r < 5; r++) {\n            if (checkFour(board[c][r], board[c][r + 1], board[c][r + 2], board[c][r + 3])) {\n                return board[c][r];\n            }\n        }\n    }\n\n\n    for (let c = 0; c < 4; c++) {\n        for (let r = 1; r < 7; r++) {\n            if (checkFour(board[c][r], board[c + 1][r], board[c + 2][r], board[c + 3][r])) {\n                return board[c][r];\n            }\n        }\n    }\n\n    for (let c = 0; c < 4; c++) {\n        for (let r = 1; r < 5; r++) {\n            if (checkFour(board[c][r], board[c + 1][r + 1], board[c + 2][r + 2], board[c + 3][r + 3]))\n                return board[c][r];\n        }\n    }\n\n    for (let c = 3; c < 7; c++) {\n        for (let r = 1; r < 5; r++) {\n            if (checkFour(board[c][r], board[c - 1][r + 1], board[c - 2][r + 2], board[c - 3][r + 3]))\n                return board[c][r];\n        }\n    }\n\n    for (let c = 0; c < 7; c++) {\n        if (board[c].slice(1, 7).indexOf(null) >= 0) {\n            return null;\n        }\n\n    }\n    return \"tie\";\n}\n\nexport { checkWinner };","import React, { Component } from 'react';\nimport \"./SnakeNode.css\";\n\nexport default class SnakeNode extends Component {\n    render() {\n        const {\n            row,\n            col,\n            type,\n        } = this.props;\n        return (\n            <div\n                id={`snakeNode-${row}-${col}`}\n                className={`snakeNode-${this.props.type}`}\n            >\n            </div>\n        );\n    }\n}","import React, { Component } from 'react';\nimport SnakeNode from './SnakeNode/SnakeNode';\n\n// under construction\n\n\nexport default class NNSnakeVisualizer extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            grid: [],\n            numRows: 30,\n            numCols: 30,\n            snake: [{row: 15, col: 15, type: \"snake\"}, {row: 16, col: 15, type: \"snake\"}, {row: 17, col: 15, type: \"snake\"}],\n            direction: {dr: 1, dc: 0},\n            foodPos: null,\n            foodScore: 0,\n        }\n    }\n\n    randomFood(){\n        let randomRow = randomInt(this.state.numRows);\n        let randomCol = randomInt(this.state.numCols);\n        return {randomRow, randomCol};\n    }\n\n    setFoodClassName(row, col){\n        let nextFood = document.getElementById(`snakeNode-${row}-${col}`);\n        if(nextFood) nextFood.className = `snakeNode-food`;\n    }\n\n    componentDidMount(){\n        // node: null, snake, food\n        let grid = [];\n        \n        for(let row = 0; row < this.state.numRows; row++){\n            let line = [];\n            for(let col = 0; col < this.state.numCols; col++){\n                let n = {row: row, col: col, type: \"null\"};\n                line.push(n);\n            }\n            grid.push(line);\n        }\n        this.showSnake(grid, this.state.snake);\n        this.setState({grid: grid});\n    }\n\n    componentDidUpdate(){\n        let grid = this.state.grid.map((a) => a.slice());\n        let {snake, lastNode} = this.updateSnake();\n        let food;\n        let score = this.state.foodScore;\n        if(this.checkFoodEaten(snake)){\n            food = this.randomFood();\n            score++;\n            snake.push(lastNode);\n        }\n        this.update(grid, snake, food, score);\n    }\n\n    render(){\n        let grid = this.state.grid;\n        return(\n            <div className=\"snakeGrid\" style={{marginTop: \"5%\", marginLeft: \"-65%\"}}>\n                    {grid.map((row, rowId) => {\n                        return (\n                            <div key={rowId}>\n                                {row.map((node, nodeId) => {\n                                    \n                                    const { row, col, type } = node;\n                                    \n                                    return (\n                                        <SnakeNode\n                                            key={nodeId}\n                                            row={row}\n                                            col={col}\n                                            type={type}\n                                        ></SnakeNode>\n                                    )\n                                })\n                                }\n                            </div>\n                        );\n                    })\n                    }\n                </div>\n        );\n    }\n}\n\nfunction randomInt(num) {\n    return Math.floor(Math.random() * num);\n}","import React, { Component } from 'react';\nimport PtronVisualizer from './Perceptron/PtronVisualizer';\nimport PongVisualizer from './PongVisualizer/PongVisualizer';\nimport ConnectFour from './ConnectFourVisualizer/ConnectFour';\nimport NNSnakeVisualizer from './NNSnakeVisualizer/NNSnakeVisualizer';\nimport './AIVisualizer.css';\n\nexport default class AIVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentAlgorithm: -1,\n            algorithms: ['Perceptron', 'Approximate Q', 'Minimax'],\n            visualizeAI: () => { },\n            reset: () => { },\n        };\n        \n        this.state.reset = this.state.reset.bind(this.state);\n        this.state.visualizeAI = this.state.visualizeAI.bind(this.state);\n        this.getAIFunctions = this.getAIFunctions.bind(this);\n        this.setAlgorithm = this.setAlgorithm.bind(this);\n        this.props.getFunctions(() => { this.state.visualizeAI() }, () => { this.state.reset() }, this.setAlgorithm, this.state.algorithms);\n    }\n\n    componentDidMount(){\n        // combinatronics.com\n        this.newScript(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/499416/TweenLite.min.js\");\n        this.newScript(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/499416/EasePack.min.js\");\n        this.newScript(\"https://combinatronics.com/JasonFengGit/Visualizer/master/src/AIVisualizer/networkAnimation.js\");\n    }\n\n    getAIFunctions(run, reset) {\n        this.state.visualizeAI = () => {\n            run()\n        };\n        this.state.reset = () => {\n            reset();\n        }\n        this.setState({ visualizeAI: run });\n    }\n    setAlgorithm(algoId) {\n        this.setState({ currentAlgorithm: algoId });\n    }\n\n    newScript(url){\n        var script = document.createElement('script');\n        script.src = url;\n        document.body.appendChild(script);\n    }\n\n    render() {\n        let renderObj;\n        switch (this.state.currentAlgorithm) {\n            case -1:\n                renderObj = \n                <div>\n                    <div class=\"textcontainer\">\n                        <div class=\"typewriter\"><h1>Welcome to the Future.</h1></div>\n                    </div>\n                    <div id=\"large-header\" class=\"large-header\" style={{marginTop: \"-18em\"}}>\n                        <canvas id=\"demo-canvas\"></canvas>\n                    </div>\n                </div>\n                break;\n            case 0:\n                renderObj = <PtronVisualizer setVisualizerRendering={this.props.setVisualizerRendering} getFunctions={this.getAIFunctions}></PtronVisualizer>\n                break;\n            case 1:\n                renderObj = <PongVisualizer setVisualizerRendering={this.props.setVisualizerRendering} getFunctions={this.getAIFunctions}></PongVisualizer>\n                break;\n            case 2:\n                renderObj = <ConnectFour setVisualizerRendering={this.props.setVisualizerRendering} getFunctions={this.getAIFunctions}></ConnectFour>\n                break;\n            case 3:\n                renderObj = <NNSnakeVisualizer setVisualizerRendering={this.props.setVisualizerRendering} getFunctions={this.getAIFunctions}></NNSnakeVisualizer>\n                break;\n            default:\n                break;\n        }\n        return (\n            <div>{renderObj}</div>\n        );\n\n    }\n}","import React, { Component } from 'react';\nimport TextLoop from \"react-text-loop\";\nimport PathFindingVisualizer from './PathFindingVisualizer/PathFindingVisualizer';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './Visualizer.css'\nimport AIVisualizer from './AIVisualizer/AIVisualizer';\n\nexport default class Visualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: 'main',\n            rendering: false,\n            algorithms: [],\n            currentAlgorithm: null,\n            goFunction: () => { },\n            resetFunction: () => { },\n            setAlgorithm: () => { },\n            sortingClicked: false,\n            pathClicked: false,\n            AIClicked: false,\n            aicount: 0,\n        };\n        this.getFunctions = this.getFunctions.bind(this);\n        this.changeRenderingState = this.changeRenderingState.bind(this);\n    }\n\n    changeRenderingState(rendering) {\n        this.setState({ rendering: rendering });\n    }\n\n    getFunctions(go, reset, setAlgo, algorithms) {\n        this.state.goFunction = go;\n        this.state.resetFunction = reset;\n        this.state.setAlgorithm = setAlgo;\n        this.state.algorithms = algorithms;\n        this.setState({ algorithms: algorithms });\n    }\n\n    render() {\n        let renderObj = null;\n        if (this.state.mode === 'pathfinding') {\n            renderObj = <PathFindingVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions} />;\n        }\n        else if (this.state.mode === 'sorting') {\n            renderObj = <SortingVisualizer setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions} />;\n        }\n        else if (this.state.mode === 'ai') {\n            renderObj = <AIVisualizer count={this.state.aicount} setVisualizerRendering={this.changeRenderingState} getFunctions={this.getFunctions}></AIVisualizer>\n        }\n        else {\n            renderObj =\n                <div class=\"welbotron\">\n\n                    <div class=\"container welc\">\n\n                        <h1 class='welcome'>Hello, algorithms.\n                            <p class=\"quote\">\n                                <TextLoop interval={3800} springConfig={{ stiffness: 200 }} adjustingSpeed={300} >\n                                    <p class=\"quoteText\">\"An algorithm must be seen to be believed.\"</p>\n                                    <p class=\"quoteText\">\"Algorithms are central objects of study in Computer Science.\"</p>\n                                    <p class=\"quoteText\">\"Algorithms are apprehensible magics.\"</p>\n                                    <p class=\"quoteText\">\"An algorithm is like a recipe.\"</p>\n                                </TextLoop>\n                            </p>\n\n                            <p class=\"lead\">This website might help you understand algorithms better by visualizing them.</p>\n                            <p class=\"secondline lead\">Click on one of the categories below to visualize algorithms.</p>\n\n                        </h1>\n                        <a href='#' class='mainpage-b' onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'pathfinding' });\n                                this.setState({ currentAlgorithm: null, pathClicked: true });\n                            }\n                        }} data-toggle={this.state.pathClicked ? \"\" : \"modal\"} data-target=\"#pathIntroModal\">\n                            <span></span>\n                            PATH FINDING\n                        </a>\n                        <a href='#' class='mainpage-b' onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'sorting', currentAlgorithm: null, sortingClicked: true });\n                            }\n                        }} data-toggle={this.state.sortingClicked ? \"\" : \"modal\"} data-target=\"#sortingIntroModal\">\n                            <span></span>\n                            SORTING\n                        </a>\n                        <a href='#' class='mainpage-b' onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'ai', currentAlgorithm: null, AIClicked: true });\n                            }\n                        }} data-toggle={this.state.AIClicked ? \"\" : \"modal\"} data-target=\"#aiIntroModal\">\n                            <span></span>\n                            ARTIFICIAL INTELLIGENCE\n                        </a>\n                    </div>\n                </div>\n        }\n        let invisibleOrNot = '';\n        if (this.state.mode === 'main') invisibleOrNot = ' invisible';\n        let algorithms = this.state.algorithms;\n        return (\n            <>\n                <nav class=\"navbar navbar-expand-lg navbar-light fixed-top bg-dark\">\n                    <button\n                        onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'main' });\n                            }\n                        }}\n                        type=\"button\" class=\"btn btn-dark navbtn\"\n                        disabled={this.state.rendering}\n                    >Main</button>\n\n                    <button\n                        onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'pathfinding', currentAlgorithm: null, pathClicked: true });\n                                this.state.setAlgorithm(-1);\n                            }\n                        }}\n                        type=\"button\" class=\"btn btn-dark navbtn\"\n                        data-toggle={this.state.pathClicked ? \"\" : \"modal\"} data-target=\"#pathIntroModal\"\n                        disabled={this.state.rendering}\n                    >Pathfinding</button>\n\n                    <button\n                        onClick={() => {\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'sorting', currentAlgorithm: null, sortingClicked: true });\n                                this.state.setAlgorithm(-1);\n                            }\n                        }}\n                        type=\"button\" class=\"btn btn-dark navbtn\"\n                        data-toggle={this.state.sortingClicked ? \"\" : \"modal\"} data-target=\"#sortingIntroModal\"\n                        disabled={this.state.rendering}\n                    >Sorting</button>\n\n                    <button\n                        onClick={() => {\n\n                            if (!this.state.rendering) {\n                                this.setState({ mode: 'ai', currentAlgorithm: null, AIClicked: true });\n                                this.state.setAlgorithm(-1);\n                            }\n                        }}\n                        type=\"button\" class=\"btn btn-dark navbtn\"\n                        data-toggle={this.state.AIClicked ? \"\" : \"modal\"} data-target=\"#aiIntroModal\"\n                        disabled={this.state.rendering}\n                    >AI</button>\n\n                    <div class={\"dropdown\" + invisibleOrNot}>\n                        <button class=\"btn btn-secondary dropdown-toggle navbtn\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.state.rendering}>\n                            {this.state.currentAlgorithm == null ? 'Algorithms' : this.state.currentAlgorithm}\n                        </button>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                            <li>\n                                {algorithms.map((algorithm, algoId) => {\n                                    return (<button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => {\n                                        this.state.setAlgorithm(algoId);\n                                        this.setState({ currentAlgorithm: this.state.algorithms[algoId] });\n                                    }}>{algorithm}</button>);\n                                }\n                                )\n                                }\n                            </li>\n                        </div>\n                    </div>\n\n                    <div class={\"dropdown\" + invisibleOrNot}>\n                        <button class=\"btn btn-light dropdown-toggle navbtn\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" disabled={this.state.rendering}>\n                            Actions\n                        </button>\n                        <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\n                            <li>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.state.goFunction()} data-toggle={this.state.currentAlgorithm === null ? \"modal\" : \"\"} data-target=\"#setAlgoModal\" disabled={this.state.mode === \"ai\" && this.state.currentAlgorithm === \"Minimax\"}>Go!</button>\n                                <button type=\"button\" class=\"btn btn-light navbtn\" onClick={() => this.state.resetFunction()}>Reset</button>\n                            </li>\n                        </div>\n                    </div>\n\n                    <a href=\"https://github.com\" style={{ marginLeft: \"32%\" }}>\n                        <img class=\"githubimg\" src=\"https://github.com/JasonFengGit/Visualizer/raw/master/src/Github_icon.png\" width=\"40px\" height=\"40px\" style={{ opacity: \"0.7 !important\"}} alt></img>\n                    </a>\n                </nav>\n\n                <div class=\"modal fade\" id=\"setAlgoModal\" role=\"dialog\">\n                    <div class=\"modal-dialog\">\n                        <div class=\"modal-content\">\n\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\">No Algorithm Selected</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                            </div>\n\n                            <div class=\"modal-body-alert\">\n                                <p>Please select an algorithm first.</p>\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n\n                <div class=\"modal fade\" id=\"pathIntroModal\" role=\"dialog\">\n                    <div class=\"modal-dialog\">\n                        <div class=\"modal-content intro\">\n\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\">Pathfinding</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                            </div>\n\n                            <div class=\"modal-body intro\">\n                                <p>\n                                    Pathfinding is generally the process of finding a route between two points. It is closely related to the shortest path problem in graph theory,\n                                    which examines how to identify the \"best\" paths valued by different criteria (Ex. distance, cost, time consumption).\n                                </p>\n                                <p>Pathfinding is also similar to Searching in some circumstances. For instance, we can use [breadth-first search] to find the shortest path in a grid world.</p>\n                                <p>\n                                    In our scenario, the paths are valued by the number of cells they passed from START:\n                                    <div class=\"simg\" width=\"20\" height=\"20\"></div>\n                                    to the TARGET:\n                                    <div class=\"fimg\" width=\"20\" height=\"20\"></div>\n                                    .\n                                </p>\n                                <p>You may drag the START and TARGET icons to change their positions, and click on the blank nodes to add Walls.</p>\n\n                                <p>Now please choose a sorting algorithm and visualize it!</p>\n                                <p class='tips'>(after choosing an algorithm, click on the [Actions] button.)</p><br />\n                                <p class='tips'>Note: there could be multiple \"best\" paths, so paths generated by different algorithms may not be consistent.</p>\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n\n                <div class=\"modal fade\" id=\"sortingIntroModal\" role=\"dialog\">\n                    <div class=\"modal-dialog\">\n                        <div class=\"modal-content intro\">\n\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\">Sorting</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                            </div>\n\n                            <div class=\"modal-body intro\">\n                                <p>Sorting is a process of arranging an ordered sequence. It is a common operation in many applications.</p>\n                                <p>Common uses of sorted sequences are:\n                                    <div class='uses-list'>\n                                        <p>·lookup or search efficiently</p>\n                                        <p>·merge sequences efficiently</p>\n                                        <p>·process data in a defined order</p>\n                                    </div>\n                                Now please choose a sorting algorithm and visualize it!\n                                </p>\n                                <p class='tips'>(after choosing an algorithm, click on the [Actions] button.)</p>\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"modal fade\" id=\"aiIntroModal\" role=\"dialog\">\n                    <div class=\"modal-dialog\">\n                        <div class=\"modal-content intro\">\n\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\">Artificial Intelligence</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\">&times;</button>\n                            </div>\n\n                            <div class=\"modal-body intro\">\n                                <p>\n                                    Artificial intelligence (AI) is intelligence demonstrated by machines.\n                                    Leading textbooks define the field as the study of \"intelligent agents\":\n                                    any device that perceives its environment and takes actions that maximize its\n                                    chance of successfully achieving its goals.\n                                </p>\n                                <p>\n                                    In this category, you will experience with powerful AI algorithms\n                                    based on fundamental ideas. Please try to understand those ideas behind through the visualizations,\n                                    and I would try my best to demonstrate those principles.\n                                </p>\n                                <p> Now please choose an algorithm and begin your journey!</p>\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-dark\" data-dismiss=\"modal\" style={{ width: '100px' }}>OK</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div>\n                    {renderObj}\n                </div>\n            </>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Visualizer from './Visualizer';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport { BrowserRouter } from 'react-router-dom';\n\nfunction App() {\n\n  return (\n    <>\n      <meta charset=\"utf-8\" />\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n\n      <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossorigin=\"anonymous\"></link>\n      <div className=\"App\">\n        <BrowserRouter basename={'github.io/'}>\n          <Visualizer></Visualizer>\n        </BrowserRouter>\n      </div >\n      <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script>\n      <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN\" crossorigin=\"anonymous\"></script>\n      <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\" integrity=\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\" crossorigin=\"anonymous\"></script>\n\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App class='app'></App>, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}